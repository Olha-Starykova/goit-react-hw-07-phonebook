{"version":3,"sources":["redux/contacts/contacts-actions.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["addTodo","createAction","name","number","payload","id","shortid","generate","deleteTodo","changeFilter","ContactForm","state","nameInputId","numberInputId","hendelChange","e","target","value","setState","hendelSubmit","preventDefault","props","contacts","map","includes","alert","onSubmit","reset","className","this","htmlFor","type","pattern","title","required","onChange","Component","connect","dispatch","contactsActions","filter","allTodos","normalizedFilter","toLowerCase","contact","getVisibleTodos","onDeleteTodo","onClick","App","createReducer","actions","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactspersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReduser","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.9c23df82.chunk.js","sourcesContent":["//import types from './contacts-types'\r\nimport shortid from 'shortid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addTodo = createAction('contacts/add', (name, number) => {\r\n    return {\r\n        payload: {\r\n            id: shortid.generate(),\r\n            name,\r\n            number,\r\n        }\r\n    }\r\n});\r\n\r\n// const addTodo = (name, number) => ({\r\n//     type: types.ADD,\r\n//     payload: {\r\n//         id: shortid.generate(),\r\n//         name: name,\r\n//         number: number,\r\n//     }\r\n// });\r\n\r\nconst deleteTodo = createAction('contacts/delete')\r\n\r\n// const deleteTodo = contactId => ({\r\n//     type: types.DELETE,\r\n//     payload: contactId\r\n// })\r\n\r\nconst changeFilter = createAction('contacts/changeFilter')\r\n\r\n// const changeFilter = value => ({\r\n//     type: types.CHANGE_FILTER,\r\n//     payload: value\r\n// })\r\n\r\nexport default { addTodo, deleteTodo, changeFilter };","import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\n  //ставим npm i shortid\r\nimport shortid from 'shortid';\r\nimport './ContactForm.css'\r\nimport { connect } from 'react-redux'\r\nimport contactsActions from '../../redux/contacts/contacts-actions'\r\n\r\n  \r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '', \r\n    number: ''\r\n  };\r\n//генерим там лежит уникалый индефикатор\r\n  nameInputId = shortid.generate();\r\n  numberInputId = shortid.generate();\r\n   \r\n    //общий метод для инпутов патерн для форм по внешнему виду контролируемый елемент\r\n    hendelChange = e => {\r\n        const { name, value } = e.target;\r\n        this.setState({\r\n            [name]: value,\r\n        })\r\n    };\r\n    //сабмит формы\r\n    hendelSubmit = e => { \r\n        e.preventDefault();\r\n        if (this.props.contacts.map(({ name }) => name).includes(this.state.name)) {\r\n        alert(`${this.state.name} is already in contacts`)\r\n        return\r\n      }\r\n       this.props.onSubmit( this.state.name, this.state.number)\r\n      \r\n        this.reset();\r\n    };\r\n    //сброс формы очистить стейт\r\n  reset = () => {\r\n    this.setState({\r\n      name: '',\r\n      number: ''\r\n    })\r\n  };\r\n\r\n\r\n    render() {\r\n      return (\r\n        <form className='form' onSubmit={this.hendelSubmit}>\r\n          <label htmlFor={this.nameInputId}>\r\n            Name <input\r\n              type=\"text\"\r\n              value={this.state.name}\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              id={this.nameInputId}\r\n              onChange={this.hendelChange}\r\n            />\r\n          </label>\r\n          <label htmlFor={this.numberInputId}>\r\n            Number <input\r\n              type=\"tel\"\r\n              value={this.state.number}\r\n              name=\"number\"\r\n             // pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n              title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n              id={this.numberInputId}\r\n              onChange={this.hendelChange}\r\n              required\r\n            />\r\n          </label>\r\n                            \r\n          <button className=\"button\" type='submit'>Add contacts</button>\r\n      \r\n        </form>\r\n            \r\n      );\r\n  };\r\n};\r\n\r\n\r\n   ContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\nconst mapStateToProps = state => {\r\n return {contacts: state.contacts.contacts}\r\n  }\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSubmit: (name, number) => dispatch(contactsActions.addTodo(name, number)) \r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport './ContactList.css'\r\nimport { connect } from 'react-redux'\r\nimport contactsActions from '../../redux/contacts/contacts-actions'\r\n\r\nconst ContactList = (({ contacts, onDeleteTodo }) =>\r\n    <ul className=\"TodoList\">\r\n        {contacts.map(({ id, name, number }) => (\r\n            <li key={id} className=\"TodoList__item\">\r\n                <p className=\"TodoList__text\">{name}: {number}</p>\r\n                <button onClick={() => onDeleteTodo(id)}>Delete</button>\r\n            </li>\r\n        ))}\r\n    </ul>\r\n);\r\n\r\n  \r\n  const getVisibleTodos = (allTodos, filter) => {\r\n\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n      return allTodos.filter(contact =>\r\n          contact.name.toLowerCase().includes(normalizedFilter),\r\n      );\r\n  };\r\n\r\nconst mapStateToProps = state => {\r\n    const { filter, contacts } = state.contacts;\r\n    const visibleTodos = getVisibleTodos(contacts, filter)\r\n    return {\r\n        contacts: visibleTodos,\r\n    };\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onDeleteTodo: (id) => dispatch(contactsActions.deleteTodo(id))\r\n})\r\n\r\n\r\nContactList.propTypes = {\r\n  onDeleteTodo: PropTypes.func.isRequired,\r\n  contacts: PropTypes.arrayOf(PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n  })),\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport './Filter.css'\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contacts-actions'\r\n\r\n\r\n\r\nconst Filter = ({ filter, onChange }) => (\r\n  <label className=\"label\">\r\n    Find contacts by name\r\n    <input type=\"text\" value={filter} onChange={onChange} />\r\n  </label>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n    filter: state.contacts.filter\r\n})\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onChange: (e) => dispatch(contactsActions.changeFilter(e.target.value))\r\n})\r\n\r\n\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React  from 'react';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\n\n\n\nconst App = () => (\n\n  <div>\n    <h1>Phonebook</h1>\n        \n    <ContactForm />\n    <h2>Contacts</h2>\n        \n    <Filter />\n     \n    <ContactList />\n  </div>\n\n \n);\n\n\nexport default App;","import { combineReducers } from \"redux\"\r\n//import types from './contacts-types'\r\nimport actions from './contacts-actions'\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n\r\n//console.log(actions.addTodo.type)\r\n\r\nconst contacts = createReducer([], {\r\n    [actions.addTodo]: (state, { payload }) => [...state, payload],\r\n    [actions.deleteTodo]: (state, { payload }) => state.filter(({ id }) => id !== payload)\r\n});\r\n\r\nconst filter = createReducer('', {\r\n    [actions.changeFilter]: (_, { payload }) => payload,\r\n}\r\n);\r\n\r\n// const contacts = (state = [], { type, payload }) => {\r\n//     switch (type) {\r\n//         case types.ADD:\r\n//             return [...state, payload]\r\n//         case types.DELETE:\r\n//             return state.filter(({ id }) => id !== payload)\r\n//         default: return state\r\n//     }\r\n// };\r\n\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//         switch (type) {  \r\n//         case types.CHANGE_FILTER:\r\n//             return payload\r\n//               default: return state\r\n//     }\r\n//  }\r\n\r\n    //описали редьюсер\r\nexport default combineReducers({\r\n    contacts,\r\n    filter\r\n})","//import { combineReducers } from 'redux';\r\n\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport logger from 'redux-logger'\r\nimport {\r\n    persistStore, persistReducer,\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER,\r\n} from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage' \r\nimport contactsReduser from './contacts/contacts-reducer'\r\n\r\n// const rootReducer = combineReducers({\r\n//     contacts: contactsReduser,\r\n// });\r\n\r\n//console.log(getDefaultMiddleware())\r\n\r\n\r\n\r\nconst middleware = [...getDefaultMiddleware({\r\n    serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    }\r\n}), logger,];\r\n\r\n// const rootReducer = combineReducers({\r\n//       contacts: persistReducer(persistConfig, contactsReduser) \r\n//     })\r\n\r\n// const persistedReducer = persistReducer(persistConfig, rootReducer )\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\nconst contactspersistConfig = {\r\n    key: 'contacts',\r\n    storage,\r\n    blacklist: ['filter'],\r\n};\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n      contacts: persistReducer(contactspersistConfig, contactsReduser) \r\n    },\r\n    middleware,\r\n})\r\n\r\nconst persistor = persistStore(store)\r\n\r\nexport default {store, persistor};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { PersistGate } from 'redux-persist/integration/react'\nimport App from './App';\nimport store from './redux/store'\nimport { Provider } from 'react-redux';\n\n//console.log(store)\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}