{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","dispatch","a","get","data","name","number","contacts","post","contactId","delete","then","catch","error","getFilter","state","filter","getAllTodos","getLoading","loading","getVisibleTodos","createSelector","normalizedFilter","toLowerCase","contact","includes","ContactForm","nameInputId","shortid","generate","numberInputId","hendelChange","e","target","value","setState","hendelSubmit","preventDefault","props","map","alert","onSubmit","reset","className","this","htmlFor","type","pattern","title","required","id","onChange","Component","connect","contactsSelectors","contactsOperations","onDeleteTodo","onClick","contactsActions","App","fetchTodos","isLoading","createReducer","_","payload","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReduser","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c0f28aa6.chunk.js","sourcesContent":["//import types from './contacts-types'\r\n//import shortid from 'shortid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\r\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nexport const fetchContactError = createAction('contacts/fetchContactError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\n// const addTodo = createAction('contacts/add', (name, number) => {\r\n//     return {\r\n//         payload: {\r\n//             id: shortid.generate(),\r\n//             name,\r\n//             number, \r\n//         }\r\n//     }\r\n// });\r\n\r\n// const addTodo = (name, number) => ({\r\n//     type: types.ADD,\r\n//     payload: {\r\n//         id: shortid.generate(),\r\n//         name: name,\r\n//         number: number,\r\n//     }\r\n// });\r\n\r\n// export const deleteTodo = createAction('contacts/delete')\r\n\r\n// const deleteTodo = contactId => ({\r\n//     type: types.DELETE,\r\n//     payload: contactId\r\n// })\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter')\r\n\r\n// const changeFilter = value => ({\r\n//     type: types.CHANGE_FILTER,\r\n//     payload: value\r\n// })\r\n\r\n// export default {\r\n//     addContactRequest,\r\n//     addContactSuccess,\r\n//     addContactError,\r\n//     deleteTodo,\r\n//     changeFilter\r\n// };","import axios from 'axios';\r\nimport {\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    // changeFilter,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    fetchContactRequest,\r\n    fetchContactSuccess,\r\n    fetchContactError,\r\n} from './contacts-actions'\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040'\r\n\r\nconst fetchTodos = () => async dispatch => {\r\n    dispatch(fetchContactRequest());\r\n\r\n    try {\r\n        const { data } = await axios.get('/contacts');\r\n        dispatch(fetchContactSuccess(data))\r\n    } catch (error) {\r\n        dispatch(fetchContactError(error))\r\n    }\r\n     // axios\r\n    //     .get('/contacts')\r\n    //     .then(({ data }) => dispatch(fetchContactSuccess(data)))\r\n    //     .catch(error => dispatch(fetchContactError(error)));\r\n} \r\n\r\nconst addTodo = (name, number) => async dispatch => {\r\n    const contacts = { name, number }\r\n    dispatch(addContactRequest())\r\n\r\n    try {\r\n        const { data } = await axios.post('/contacts', contacts)\r\n        dispatch(addContactSuccess(data))\r\n    } catch (error) {\r\n        dispatch(addContactError(error))\r\n    }\r\n    // axios\r\n    //     .post('/contacts', contacts)\r\n    //     .then(({ data }) =>\r\n    //         dispatch(addContactSuccess(data)))\r\n    //     .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\n\r\nconst deleteTodo = contactId =>  dispatch => {\r\n    dispatch(deleteContactRequest())\r\n\r\n      axios\r\n        .delete(`/contacts/${contactId}`)\r\n        .then(() => dispatch(deleteContactSuccess(contactId)))\r\n        .catch(error => dispatch(deleteContactError(error)));\r\n\r\n};\r\n    \r\n\r\nexport default {\r\n    fetchTodos,\r\n    addTodo,\r\n    deleteTodo,\r\n}\r\n","import {createSelector} from '@reduxjs/toolkit'\r\n\r\nconst getLoading = state => state.contacts.loading;\r\nconst getFilter = state => state.contacts.filter;\r\nconst getAllTodos = state => state.contacts.contacts\r\n\r\n// const getVisibleTodos = state => {\r\n//     const filter = getFilter(state)\r\n//     const contacts = getAllTodos(state)\r\n//     const normalizedFilter = filter.toLowerCase();\r\n    \r\n//     return contacts.filter(contact =>\r\n//         contact.name.toLowerCase().includes(normalizedFilter),\r\n//     );\r\n// };\r\n\r\n//предаем от чего зависит мемонизация для кеширования аргументов\r\nconst getVisibleTodos = createSelector(\r\n    [getAllTodos, getFilter],\r\n    (contacts, filter) => {\r\n        const normalizedFilter = filter.toLowerCase();\r\n        return contacts.filter(contact =>\r\n            contact.name.toLowerCase().includes(normalizedFilter),\r\n        );\r\n    },\r\n);\r\n\r\nexport default {\r\n    getLoading,\r\n    getFilter,\r\n    getVisibleTodos,\r\n    getAllTodos,\r\n};","import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\n  //ставим npm i shortid\r\nimport shortid from 'shortid';\r\nimport './ContactForm.css'\r\nimport { connect } from 'react-redux'\r\nimport contactsOperations from '../../redux/contacts/contacts-operations'\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors'\r\n\r\n  \r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '', \r\n    number: ''\r\n  };\r\n//генерим там лежит уникалый индефикатор\r\n  nameInputId = shortid.generate();\r\n  numberInputId = shortid.generate();\r\n   \r\n    //общий метод для инпутов патерн для форм по внешнему виду контролируемый елемент\r\n    hendelChange = e => {\r\n        const { name, value } = e.target;\r\n        this.setState({\r\n            [name]: value,\r\n        })\r\n    };\r\n    //сабмит формы\r\n    hendelSubmit = e => { \r\n        e.preventDefault();\r\n        if (this.props.contacts.map(({ name }) => name).includes(this.state.name)) {\r\n        alert(`${this.state.name} is already in contacts`)\r\n        return\r\n      }\r\n       this.props.onSubmit( this.state.name, this.state.number)\r\n      \r\n        this.reset();\r\n    };\r\n    //сброс формы очистить стейт\r\n  reset = () => {\r\n    this.setState({\r\n      name: '',\r\n      number: ''\r\n    })\r\n  };\r\n\r\n\r\n    render() {\r\n      return (\r\n        <form className='form' onSubmit={this.hendelSubmit}>\r\n          <label htmlFor={this.nameInputId}>\r\n            Name <input\r\n              type=\"text\"\r\n              value={this.state.name}\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              id={this.nameInputId}\r\n              onChange={this.hendelChange}\r\n            />\r\n          </label>\r\n          <label htmlFor={this.numberInputId}>\r\n            Number <input\r\n              type=\"tel\"\r\n              value={this.state.number}\r\n              name=\"number\"\r\n              pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n              title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n              id={this.numberInputId}\r\n              onChange={this.hendelChange}\r\n              required\r\n            />\r\n          </label>\r\n                            \r\n          <button className=\"button\" type='submit'>Add contacts</button>\r\n      \r\n        </form>\r\n            \r\n      );\r\n  };\r\n};\r\n\r\n\r\n   ContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\nconst mapStateToProps = state => {\r\n//  return {contacts: state.contacts.contacts}\r\n   return {contacts: contactsSelectors.getAllTodos(state) }\r\n  }\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSubmit: (name, number) => dispatch(contactsOperations.addTodo(name, number)) \r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport './ContactList.css'\r\nimport { connect } from 'react-redux'\r\nimport  contactsOperations from '../../redux/contacts/contacts-operations'\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors'\r\n\r\n\r\nconst ContactList = (({ contacts, onDeleteTodo }) =>\r\n    <ul className=\"TodoList\">\r\n        {contacts.map(({ id, name, number }) => (\r\n            <li key={id} className=\"TodoList__item\">\r\n                <p className=\"TodoList__text\">{name}: {number}</p>\r\n                <button onClick={() => onDeleteTodo(id)}>Delete</button>\r\n            </li>\r\n        ))}\r\n    </ul>\r\n);\r\n\r\n  \r\nconst mapStateToProps = state => ({\r\n    contacts: contactsSelectors.getVisibleTodos(state)\r\n})\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onDeleteTodo: (id) => dispatch(contactsOperations.deleteTodo(id))\r\n})\r\n\r\n\r\nContactList.propTypes = {\r\n  onDeleteTodo: PropTypes.func.isRequired,\r\n  contacts: PropTypes.arrayOf(PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n  })),\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport './Filter.css'\r\nimport { connect } from 'react-redux';\r\nimport * as contactsActions from '../../redux/contacts/contacts-actions'\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors'\r\n\r\n\r\nconst Filter = ({ filter, onChange }) => (\r\n  <label className=\"label\">\r\n    Find contacts by name\r\n    <input type=\"text\" value={filter} onChange={onChange} />\r\n  </label>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n    // filter: state.contacts.filter\r\n   filter: contactsSelectors.getFilter(state)\r\n})\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onChange: (e) => dispatch(contactsActions.changeFilter(e.target.value))\r\n})\r\n\r\n\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React, { Component } from 'react';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\nimport { connect } from 'react-redux';\nimport contactsOperations from './redux/contacts/contacts-operations'\nimport contactsSelectors from './redux/contacts/contacts-selectors'\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.fetchTodos();\n  }\n  // const App = () => (\n  render() {\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        {this.props.isLoading && <h1>...Loading</h1>}\n        <ContactForm />\n        <h2>Contacts</h2>\n        \n        <Filter />\n     \n        <ContactList />\n      </div>\n\n \n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isLoading: contactsSelectors.getLoading(state),\n})\n\nconst mapDispatchToProps = dispatch => ({\nfetchTodos: ()=>dispatch(contactsOperations.fetchTodos())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { combineReducers } from \"redux\"\r\n//import types from './contacts-types'\r\nimport {\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    changeFilter,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    fetchContactRequest,\r\n    fetchContactSuccess,\r\n    fetchContactError,\r\n} from './contacts-actions'\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n\r\n\r\n//console.log(actions.addTodo.type)\r\n\r\nconst contacts = createReducer([], {\r\n    [fetchContactSuccess]: (_, { payload }) =>  payload,\r\n    [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n    [deleteContactSuccess]: (state, { payload }) => state.filter(({ id }) => id !== payload)\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n    [fetchContactRequest]: () => true,\r\n    [fetchContactSuccess]: () => false,\r\n    [fetchContactError]: () => false,\r\n    [addContactRequest]: () => true,\r\n    [addContactSuccess]: () => false,\r\n    [addContactError]: () => false,\r\n    [deleteContactRequest]: () => true,\r\n    [deleteContactSuccess]: () => false,\r\n    [deleteContactError]: () => false,\r\n});\r\n \r\nconst filter = createReducer('', {\r\n    [changeFilter]: (_, { payload }) => payload,\r\n}\r\n);\r\n\r\n// const contacts = (state = [], { type, payload }) => {\r\n//     switch (type) {\r\n//         case types.ADD:\r\n//             return [...state, payload]\r\n//         case types.DELETE:\r\n//             return state.filter(({ id }) => id !== payload)\r\n//         default: return state\r\n//     }\r\n// };\r\n\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//         switch (type) {  \r\n//         case types.CHANGE_FILTER:\r\n//             return payload\r\n//               default: return state\r\n//     }\r\n//  }\r\n\r\n\r\n    //описали редьюсер\r\nexport default combineReducers({\r\n    contacts,\r\n    filter,\r\n    loading,\r\n   })","//import { combineReducers } from 'redux';\r\n\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport logger from 'redux-logger'\r\nimport {\r\n    // persistStore, persistReducer,\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER,\r\n} from 'redux-persist'\r\n// import storage from 'redux-persist/lib/storage' \r\nimport contactsReduser from './contacts/contacts-reducer'\r\n\r\n// const rootReducer = combineReducers({\r\n//     contacts: contactsReduser,\r\n// });\r\n\r\n//console.log(getDefaultMiddleware())\r\n\r\n\r\n\r\nconst middleware = [...getDefaultMiddleware({\r\n    serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    }\r\n}), logger,];\r\n\r\n// const rootReducer = combineReducers({\r\n//       contacts: persistReducer(persistConfig, contactsReduser) \r\n//     })\r\n\r\n// const persistedReducer = persistReducer(persistConfig, rootReducer )\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\n// const contactspersistConfig = {\r\n//     key: 'contacts',\r\n//     storage,\r\n//     blacklist: ['filter'],\r\n// };\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        contacts: contactsReduser,\r\n            // persistReducer(contactspersistConfig, contactsReduser)\r\n    },\r\n    middleware,\r\n})\r\n\r\n// const persistor = persistStore(store)\r\n\r\n// export default { store, persistor };\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import { PersistGate } from 'redux-persist/integration/react'\nimport App from './App';\nimport store from './redux/store'\nimport { Provider } from 'react-redux';\n\n//console.log(store)\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n        <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n); "],"sourceRoot":""}